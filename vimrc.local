" Disable ex mode
map Q <Nop>

set fileformats=unix " Only support unix-style files. Show carriage-return as ^M for non-unix style line endings

set showmatch  "Show matching bracets when text indicator is over them

" tabbing:
set expandtab
set shiftwidth=2
set softtabstop=2

" folding:
set nofoldenable            " don't fold when opening new buffers

set undodir^=~/.vim/undo " For vim-sensible, keep all the undo files in the same place
set backupdir=~/.vim/backup/
set directory=~/.vim/backup/

set copyindent
" Quit if only NERDTree is left
map <C-n> :NERDTreeToggle<CR>
map <leader>n :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

nnoremap <Leader>w :w<CR>
map q: :q

inoremap jk <Esc>
" Fix for funny characters
"let g:NERDTreeDirArrows=0
" Open automatically if no files specified:
"autocmd vimenter * if !argc() | NERDTree | endif

"" Syntastic
let g:syntastic_mode_map = { 'mode': 'active',
      \ 'active_filetypes': ['ruby', 'haskell'],
      \ 'passive_filetypes': ['scala', 'java', 'python'] }
let g:syntastic_haskell_checkers = ['hdevtools']
let g:syntastic_ruby_exec = '~/bin/ruby'
"let g:syntastic_ruby_checkers = ['rubocop']
"let g:syntastic_scala_checkers = ['scalac']

" GitGutter
let g:gitgutter_enabled = 0

" Airline
"let g:airline_theme='luna'
" let g:airline_powerline_fonts = 1

" Snippets
let g:UltiSnipsListSnippets="<F6>"

" CtrlP
let g:ctrlp_use_caching = 1
let g:ctrlp_working_path_mode = 'a'
let g:ctrlp_clear_cache_on_exit = 0
noremap <leader>e :CtrlP<CR>
"let g:ctrlp_map = ',e'
unlet g:ctrlp_user_command

let g:SuperTabDefaultCompletionType = "context"

" Custom command for :Ack & :Ag
" Make sure ack & ag is on your path
let g:ackprg="~/bin/ack -H --nocolor --nogroup --column"
let g:ag_prg="ag --vimgrep --smart-case"

" Haskell
let g:haskell_conceal_wide = 0
au FileType haskell nnoremap <buffer> <F1> :HdevtoolsType<CR>
au FileType haskell nnoremap <buffer> <silent> <F2> :HdevtoolsClear<CR>

" Elm
noremap <leader>jl :ElmEvalLine<CR>
vnoremap <leader>js :<C-u>ElmEvalSelection<CR>
nnoremap <leader>jp :ElmPrintTypes<CR>
nnoremap <leader>jc :ElmMakeCurrentFile<CR>
nnoremap <leader>jm :ElmMakeMain<CR>

let g:racer_cmd = "/Users/zakv/bin/racer"
let $RUST_SRC_PATH="/Users/zakv/projects/rust/rustc-1.0.0/src/"
